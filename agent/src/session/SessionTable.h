/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef qpid010SESSIONTABLE_H
#define qpid010SESSIONTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(MRG-MESSAGING-MIB)
config_require(MRG-MESSAGING-MIB/qpid010SessionTable/qpid010SessionTable_interface)
config_require(MRG-MESSAGING-MIB/qpid010SessionTable/qpid010SessionTable_data_access)
config_require(MRG-MESSAGING-MIB/qpid010SessionTable/qpid010SessionTable_data_get)
config_require(MRG-MESSAGING-MIB/qpid010SessionTable/qpid010SessionTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for qpid010SessionTable 
     */
#include "SessionTable_oids.h"

    /*
     * enum definions 
     */
#include "SessionTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_SessionTable(void);
    void            shutdown_qpid010SessionTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table qpid010SessionTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * MRG-MESSAGING-MIB::qpid010SessionTable is subid 1 of qpid010Sessions.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.1.13.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review qpid010SessionTable registration context.
     */
    typedef netsnmp_data_list qpid010SessionTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review qpid010SessionTable data context structure.
     * This structure is used to represent the data for qpid010SessionTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * qpid010SessionTable.
     */
    typedef struct qpid010SessionTable_data_s {

        /*
         * qpid010SessionVhostRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010SessionVhostRef[255];
        size_t          qpid010SessionVhostRef_len;      /* # of char elements, not bytes */

        /*
         * qpid010SessionName(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010SessionName[255];
        size_t          qpid010SessionName_len;  /* # of char elements, not bytes */

        /*
         * qpid010SessionChannelId(3)/Uint16/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            qpid010SessionChannelId;

        /*
         * qpid010SessionConnectionRef(4)/ObjId/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            qpid010SessionConnectionRef[255];
        size_t          qpid010SessionConnectionRef_len; /* # of char elements, not bytes */

        /*
         * qpid010SessionDetachedLifespan(5)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionDetachedLifespan;

        /*
         * qpid010SessionAttached(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          qpid010SessionAttached;

        /*
         * qpid010SessionExpireTime(7)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionExpireTime;

        /*
         * qpid010SessionMaxClientRate(8)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionMaxClientRate;

        /*
         * qpid010SessionFramesOutstanding(9)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionFramesOutstanding;

        /*
         * qpid010SessionTxnStarts(10)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010SessionTxnStarts;

        /*
         * qpid010SessionTxnCommits(11)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010SessionTxnCommits;

        /*
         * qpid010SessionTxnRejects(12)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010SessionTxnRejects;

        /*
         * qpid010SessionTxnCount(13)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionTxnCount;

        /*
         * qpid010SessionClientCredit(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010SessionClientCredit;

    } qpid010SessionTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review qpid010SessionTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef qpid010SessionTable_data qpid010SessionTable_undo_data;

    /*
     * TODO:120:r: |-> Review qpid010SessionTable mib index.
     * This structure is used to represent the index for qpid010SessionTable.
     */
    typedef struct qpid010SessionTable_mib_index_s {

        /*
         * qpid010SessionInternalIndex(15)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          qpid010SessionInternalIndex;


    } qpid010SessionTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review qpid010SessionTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_qpid010SessionTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review qpid010SessionTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * qpid010SessionTable_rowreq_ctx pointer.
     */
    typedef struct qpid010SessionTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_qpid010SessionTable_IDX_LEN];

        qpid010SessionTable_mib_index tbl_idx;

        qpid010SessionTable_data data;
        qpid010SessionTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to qpid010SessionTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *qpid010SessionTable_data_list;

    } qpid010SessionTable_rowreq_ctx;

    typedef struct qpid010SessionTable_ref_rowreq_ctx_s {
        qpid010SessionTable_rowreq_ctx *rowreq_ctx;
    } qpid010SessionTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        qpid010SessionTable_pre_request(qpid010SessionTable_registration *
                                       user_context);
    int            
        qpid010SessionTable_post_request(qpid010SessionTable_registration *
                                        user_context, int rc);

    int            
        qpid010SessionTable_rowreq_ctx_init(qpid010SessionTable_rowreq_ctx *
                                           rowreq_ctx,
                                           void *user_init_ctx);
    void           
        qpid010SessionTable_rowreq_ctx_cleanup(qpid010SessionTable_rowreq_ctx
                                              * rowreq_ctx);

    int            
        qpid010SessionTable_check_dependencies(qpid010SessionTable_rowreq_ctx
                                              * rowreq_ctx);
    int             qpid010SessionTable_commit(qpid010SessionTable_rowreq_ctx
                                              * rowreq_ctx);

    qpid010SessionTable_rowreq_ctx
        *qpid010SessionTable_row_find_by_mib_index
        (qpid010SessionTable_mib_index * mib_idx);

    extern const oid qpid010SessionTable_oid[];
    extern const int qpid010SessionTable_oid_size;


#include "SessionTable_interface.h"
#include "SessionTable_data_access.h"
#include "SessionTable_data_get.h"
#include "SessionTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* qpid010SESSIONTABLE_H */
/** @} */
