/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef brokerSESSIONTABLE_H
#define brokerSESSIONTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(QPID-MESSAGING-MIB)
config_require(QPID-MESSAGING-MIB/brokerSessionTable/brokerSessionTable_interface)
config_require(QPID-MESSAGING-MIB/brokerSessionTable/brokerSessionTable_data_access)
config_require(QPID-MESSAGING-MIB/brokerSessionTable/brokerSessionTable_data_get)
config_require(QPID-MESSAGING-MIB/brokerSessionTable/brokerSessionTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for brokerSessionTable 
     */
#include "SessionTable_oids.h"

    /*
     * enum definions 
     */
#include "SessionTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_SessionTable(void);
    void            shutdown_brokerSessionTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table brokerSessionTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * QPID-MESSAGING-MIB::brokerSessionTable is subid 1 of brokerSessions.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.1.13.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review brokerSessionTable registration context.
     */
    typedef netsnmp_data_list brokerSessionTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review brokerSessionTable data context structure.
     * This structure is used to represent the data for brokerSessionTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * brokerSessionTable.
     */
    typedef struct brokerSessionTable_data_s {

        /*
         * brokerSessionVhostRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerSessionVhostRef[255];
        size_t          brokerSessionVhostRef_len;      /* # of char elements, not bytes */

        /*
         * brokerSessionName(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerSessionName[255];
        size_t          brokerSessionName_len;  /* # of char elements, not bytes */

        /*
         * brokerSessionChannelId(3)/Uint16/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerSessionChannelId;

        /*
         * brokerSessionConnectionRef(4)/ObjId/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerSessionConnectionRef[255];
        size_t          brokerSessionConnectionRef_len; /* # of char elements, not bytes */

        /*
         * brokerSessionDetachedLifespan(5)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionDetachedLifespan;

        /*
         * brokerSessionAttached(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerSessionAttached;

        /*
         * brokerSessionExpireTime(7)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionExpireTime;

        /*
         * brokerSessionMaxClientRate(8)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionMaxClientRate;

        /*
         * brokerSessionFramesOutstanding(9)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionFramesOutstanding;

        /*
         * brokerSessionTxnStarts(10)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerSessionTxnStarts;

        /*
         * brokerSessionTxnCommits(11)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerSessionTxnCommits;

        /*
         * brokerSessionTxnRejects(12)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerSessionTxnRejects;

        /*
         * brokerSessionTxnCount(13)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionTxnCount;

        /*
         * brokerSessionClientCredit(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerSessionClientCredit;

    } brokerSessionTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review brokerSessionTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef brokerSessionTable_data brokerSessionTable_undo_data;

    /*
     * TODO:120:r: |-> Review brokerSessionTable mib index.
     * This structure is used to represent the index for brokerSessionTable.
     */
    typedef struct brokerSessionTable_mib_index_s {

        /*
         * brokerSessionInternalIndex(15)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          brokerSessionInternalIndex;


    } brokerSessionTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review brokerSessionTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_brokerSessionTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review brokerSessionTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * brokerSessionTable_rowreq_ctx pointer.
     */
    typedef struct brokerSessionTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_brokerSessionTable_IDX_LEN];

        brokerSessionTable_mib_index tbl_idx;

        brokerSessionTable_data data;
        brokerSessionTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to brokerSessionTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *brokerSessionTable_data_list;

    } brokerSessionTable_rowreq_ctx;

    typedef struct brokerSessionTable_ref_rowreq_ctx_s {
        brokerSessionTable_rowreq_ctx *rowreq_ctx;
    } brokerSessionTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        brokerSessionTable_pre_request(brokerSessionTable_registration *
                                       user_context);
    int            
        brokerSessionTable_post_request(brokerSessionTable_registration *
                                        user_context, int rc);

    int            
        brokerSessionTable_rowreq_ctx_init(brokerSessionTable_rowreq_ctx *
                                           rowreq_ctx,
                                           void *user_init_ctx);
    void           
        brokerSessionTable_rowreq_ctx_cleanup(brokerSessionTable_rowreq_ctx
                                              * rowreq_ctx);

    int            
        brokerSessionTable_check_dependencies(brokerSessionTable_rowreq_ctx
                                              * rowreq_ctx);
    int             brokerSessionTable_commit(brokerSessionTable_rowreq_ctx
                                              * rowreq_ctx);

    brokerSessionTable_rowreq_ctx
        *brokerSessionTable_row_find_by_mib_index
        (brokerSessionTable_mib_index * mib_idx);

    extern const oid brokerSessionTable_oid[];
    extern const int brokerSessionTable_oid_size;


#include "SessionTable_interface.h"
#include "SessionTable_data_access.h"
#include "SessionTable_data_get.h"
#include "SessionTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* brokerSESSIONTABLE_H */
/** @} */
