/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef brokerQUEUETABLE_H
#define brokerQUEUETABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(QPID-MESSAGING-MIB)
config_require(QPID-MESSAGING-MIB/brokerQueueTable/brokerQueueTable_interface)
config_require(QPID-MESSAGING-MIB/brokerQueueTable/brokerQueueTable_data_access)
config_require(QPID-MESSAGING-MIB/brokerQueueTable/brokerQueueTable_data_get)
config_require(QPID-MESSAGING-MIB/brokerQueueTable/brokerQueueTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for brokerQueueTable 
     */
#include "QueueTable_oids.h"

    /*
     * enum definions 
     */
#include "../enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_QueueTable(void);
    void            shutdown_brokerQueueTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table brokerQueueTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * QPID-MESSAGING-MIB::brokerQueueTable is subid 1 of brokerQueues.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.1.6.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review brokerQueueTable registration context.
     */
    typedef netsnmp_data_list brokerQueueTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review brokerQueueTable data context structure.
     * This structure is used to represent the data for brokerQueueTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * brokerQueueTable.
     */
    typedef struct brokerQueueTable_data_s {

        /*
         * brokerQueueVhostRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerQueueVhostRef[255];
        size_t          brokerQueueVhostRef_len;        /* # of char elements, not bytes */

        /*
         * brokerQueueName(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerQueueName[255];
        size_t          brokerQueueName_len;    /* # of char elements, not bytes */

        /*
         * brokerQueueDurable(3)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerQueueDurable;

        /*
         * brokerQueueAutoDelete(4)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerQueueAutoDelete;

        /*
         * brokerQueueExclusive(5)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerQueueExclusive;

        /*
         * brokerQueueArguments(6)/Map/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerQueueArguments[65535];
        size_t          brokerQueueArguments_len;       /* # of char elements, not bytes */

        /*
         * brokerQueueAltExchange(7)/ObjId/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerQueueAltExchange[255];
        size_t          brokerQueueAltExchange_len;     /* # of char elements, not bytes */

        /*
         * brokerQueueMsgTotalEnqueues(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgTotalEnqueues;

        /*
         * brokerQueueMsgTotalDequeues(9)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgTotalDequeues;

        /*
         * brokerQueueMsgTxnEnqueues(10)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgTxnEnqueues;

        /*
         * brokerQueueMsgTxnDequeues(11)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgTxnDequeues;

        /*
         * brokerQueueMsgPersistEnqueues(12)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgPersistEnqueues;

        /*
         * brokerQueueMsgPersistDequeues(13)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgPersistDequeues;

        /*
         * brokerQueueMsgDepth(14)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgDepth;

        /*
         * brokerQueueByteDepth(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteDepth;

        /*
         * brokerQueueByteTotalEnqueues(16)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteTotalEnqueues;

        /*
         * brokerQueueByteTotalDequeues(17)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteTotalDequeues;

        /*
         * brokerQueueByteTxnEnqueues(18)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteTxnEnqueues;

        /*
         * brokerQueueByteTxnDequeues(19)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteTxnDequeues;

        /*
         * brokerQueueBytePersistEnqueues(20)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueBytePersistEnqueues;

        /*
         * brokerQueueBytePersistDequeues(21)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueBytePersistDequeues;

        /*
         * brokerQueueMsgFtdEnqueues(22)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgFtdEnqueues;

        /*
         * brokerQueueMsgFtdDequeues(23)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgFtdDequeues;

        /*
         * brokerQueueByteFtdEnqueues(24)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteFtdEnqueues;

        /*
         * brokerQueueByteFtdDequeues(25)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteFtdDequeues;

        /*
         * brokerQueueMsgFtdDepth(26)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueMsgFtdDepth;

        /*
         * brokerQueueByteFtdDepth(27)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueByteFtdDepth;

        /*
         * brokerQueueReleases(28)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueReleases;

        /*
         * brokerQueueAcquires(29)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueAcquires;

        /*
         * brokerQueueDiscardsTtl(30)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsTtl;

        /*
         * brokerQueueDiscardsRing(31)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsRing;

        /*
         * brokerQueueDiscardsLvq(32)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsLvq;

        /*
         * brokerQueueDiscardsOverflow(33)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsOverflow;

        /*
         * brokerQueueDiscardsSubscriber(34)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsSubscriber;

        /*
         * brokerQueueDiscardsPurge(35)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueDiscardsPurge;

        /*
         * brokerQueueReroutes(36)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerQueueReroutes;

        /*
         * brokerQueueConsumerCount(37)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueConsumerCount;

        /*
         * brokerQueueConsumerCountHi(38)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueConsumerCountHi;

        /*
         * brokerQueueConsumerCountLow(39)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueConsumerCountLow;

        /*
         * brokerQueueBindingCount(40)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueBindingCount;

        /*
         * brokerQueueBindingCountHi(41)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueBindingCountHi;

        /*
         * brokerQueueBindingCountLow(42)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueBindingCountLow;

        /*
         * brokerQueueUnackedMessages(43)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueUnackedMessages;

        /*
         * brokerQueueUnackedMessagesHi(44)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueUnackedMessagesHi;

        /*
         * brokerQueueUnackedMessagesLow(45)/Hilo32/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerQueueUnackedMessagesLow;

        /*
         * brokerQueueMessageLatency(46)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerQueueMessageLatency;

        /*
         * brokerQueueFlowStopped(47)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerQueueFlowStopped;

        /*
         * brokerQueueFlowStoppedCount(48)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerQueueFlowStoppedCount;

    } brokerQueueTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review brokerQueueTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef brokerQueueTable_data brokerQueueTable_undo_data;

    /*
     * TODO:120:r: |-> Review brokerQueueTable mib index.
     * This structure is used to represent the index for brokerQueueTable.
     */
    typedef struct brokerQueueTable_mib_index_s {

        /*
         * brokerQueueInternalIndex(49)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          brokerQueueInternalIndex;


    } brokerQueueTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review brokerQueueTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_brokerQueueTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review brokerQueueTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * brokerQueueTable_rowreq_ctx pointer.
     */
    typedef struct brokerQueueTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_brokerQueueTable_IDX_LEN];

        brokerQueueTable_mib_index tbl_idx;

        brokerQueueTable_data data;
        brokerQueueTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to brokerQueueTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *brokerQueueTable_data_list;

    } brokerQueueTable_rowreq_ctx;

    typedef struct brokerQueueTable_ref_rowreq_ctx_s {
        brokerQueueTable_rowreq_ctx *rowreq_ctx;
    } brokerQueueTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        brokerQueueTable_pre_request(brokerQueueTable_registration *
                                     user_context);
    int            
        brokerQueueTable_post_request(brokerQueueTable_registration *
                                      user_context, int rc);

    int            
        brokerQueueTable_rowreq_ctx_init(brokerQueueTable_rowreq_ctx *
                                         rowreq_ctx, void *user_init_ctx);
    void           
        brokerQueueTable_rowreq_ctx_cleanup(brokerQueueTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        brokerQueueTable_check_dependencies(brokerQueueTable_rowreq_ctx *
                                            rowreq_ctx);
    int             brokerQueueTable_commit(brokerQueueTable_rowreq_ctx *
                                            rowreq_ctx);

    brokerQueueTable_rowreq_ctx
        *brokerQueueTable_row_find_by_mib_index(brokerQueueTable_mib_index
                                                * mib_idx);

    extern const oid brokerQueueTable_oid[];
    extern const int brokerQueueTable_oid_size;


#include "QueueTable_interface.h"
#include "QueueTable_data_access.h"
#include "QueueTable_data_get.h"
#include "QueueTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* brokerQUEUETABLE_H */
/** @} */
