/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef brokerCONNECTIONTABLE_H
#define brokerCONNECTIONTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(QPID-MESSAGING-MIB)
config_require(QPID-MESSAGING-MIB/brokerConnectionTable/brokerConnectionTable_interface)
config_require(QPID-MESSAGING-MIB/brokerConnectionTable/brokerConnectionTable_data_access)
config_require(QPID-MESSAGING-MIB/brokerConnectionTable/brokerConnectionTable_data_get)
config_require(QPID-MESSAGING-MIB/brokerConnectionTable/brokerConnectionTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for brokerConnectionTable 
     */
#include "ConnectionTable_oids.h"

    /*
     * enum definions 
     */
#include "ConnectionTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_ConnectionTable(void);
    void            shutdown_brokerConnectionTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table brokerConnectionTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * QPID-MESSAGING-MIB::brokerConnectionTable is subid 1 of brokerConnections.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.1.10.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review brokerConnectionTable registration context.
     */
    typedef netsnmp_data_list brokerConnectionTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review brokerConnectionTable data context structure.
     * This structure is used to represent the data for brokerConnectionTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * brokerConnectionTable.
     */
    typedef struct brokerConnectionTable_data_s {

        /*
         * brokerConnectionVhostRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerConnectionVhostRef[255];
        size_t          brokerConnectionVhostRef_len;   /* # of char elements, not bytes */

        /*
         * brokerConnectionAddress(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerConnectionAddress[255];
        size_t          brokerConnectionAddress_len;    /* # of char elements, not bytes */

        /*
         * brokerConnectionIncoming(3)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerConnectionIncoming;

        /*
         * brokerConnectionSystemConnection(4)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerConnectionSystemConnection;

        /*
         * brokerConnectionUserProxyAuth(5)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerConnectionUserProxyAuth;

        /*
         * brokerConnectionFederationLink(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerConnectionFederationLink;

        /*
         * brokerConnectionAuthIdentity(7)/Sstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerConnectionAuthIdentity[255];
        size_t          brokerConnectionAuthIdentity_len;       /* # of char elements, not bytes */

        /*
         * brokerConnectionRemoteProcessName(8)/Lstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerConnectionRemoteProcessName[65535];
        size_t          brokerConnectionRemoteProcessName_len;  /* # of char elements, not bytes */

        /*
         * brokerConnectionRemotePid(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerConnectionRemotePid;

        /*
         * brokerConnectionRemoteParentPid(10)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          brokerConnectionRemoteParentPid;

        /*
         * brokerConnectionShadow(11)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerConnectionShadow;

        /*
         * brokerConnectionSaslMechanism(12)/Sstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            brokerConnectionSaslMechanism[255];
        size_t          brokerConnectionSaslMechanism_len;      /* # of char elements, not bytes */

        /*
         * brokerConnectionSaslSsf(13)/Uint16/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerConnectionSaslSsf;

        /*
         * brokerConnectionClosing(14)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          brokerConnectionClosing;

        /*
         * brokerConnectionFramesFromClient(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionFramesFromClient;

        /*
         * brokerConnectionFramesToClient(16)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionFramesToClient;

        /*
         * brokerConnectionBytesFromClient(17)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionBytesFromClient;

        /*
         * brokerConnectionBytesToClient(18)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionBytesToClient;

        /*
         * brokerConnectionMsgsFromClient(19)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionMsgsFromClient;

        /*
         * brokerConnectionMsgsToClient(20)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             brokerConnectionMsgsToClient;

    } brokerConnectionTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review brokerConnectionTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef brokerConnectionTable_data brokerConnectionTable_undo_data;

    /*
     * TODO:120:r: |-> Review brokerConnectionTable mib index.
     * This structure is used to represent the index for brokerConnectionTable.
     */
    typedef struct brokerConnectionTable_mib_index_s {

        /*
         * brokerConnectionInternalIndex(21)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          brokerConnectionInternalIndex;


    } brokerConnectionTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review brokerConnectionTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_brokerConnectionTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review brokerConnectionTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * brokerConnectionTable_rowreq_ctx pointer.
     */
    typedef struct brokerConnectionTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_brokerConnectionTable_IDX_LEN];

        brokerConnectionTable_mib_index tbl_idx;

        brokerConnectionTable_data data;
        brokerConnectionTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to brokerConnectionTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *brokerConnectionTable_data_list;

    } brokerConnectionTable_rowreq_ctx;

    typedef struct brokerConnectionTable_ref_rowreq_ctx_s {
        brokerConnectionTable_rowreq_ctx *rowreq_ctx;
    } brokerConnectionTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        brokerConnectionTable_pre_request
        (brokerConnectionTable_registration * user_context);
    int            
        brokerConnectionTable_post_request
        (brokerConnectionTable_registration * user_context, int rc);

    int            
        brokerConnectionTable_rowreq_ctx_init
        (brokerConnectionTable_rowreq_ctx * rowreq_ctx,
         void *user_init_ctx);
    void           
        brokerConnectionTable_rowreq_ctx_cleanup
        (brokerConnectionTable_rowreq_ctx * rowreq_ctx);

    int            
        brokerConnectionTable_check_dependencies
        (brokerConnectionTable_rowreq_ctx * rowreq_ctx);
    int            
        brokerConnectionTable_commit(brokerConnectionTable_rowreq_ctx *
                                     rowreq_ctx);

    brokerConnectionTable_rowreq_ctx
        *brokerConnectionTable_row_find_by_mib_index
        (brokerConnectionTable_mib_index * mib_idx);

    extern const oid brokerConnectionTable_oid[];
    extern const int brokerConnectionTable_oid_size;


#include "ConnectionTable_interface.h"
#include "ConnectionTable_data_access.h"
#include "ConnectionTable_data_get.h"
#include "ConnectionTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* brokerCONNECTIONTABLE_H */
/** @} */
