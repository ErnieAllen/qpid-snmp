/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef qpid010CONNECTIONTABLE_H
#define qpid010CONNECTIONTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(MRG-MESSAGING-MIB)
config_require(MRG-MESSAGING-MIB/qpid010ConnectionTable/qpid010ConnectionTable_interface)
config_require(MRG-MESSAGING-MIB/qpid010ConnectionTable/qpid010ConnectionTable_data_access)
config_require(MRG-MESSAGING-MIB/qpid010ConnectionTable/qpid010ConnectionTable_data_get)
config_require(MRG-MESSAGING-MIB/qpid010ConnectionTable/qpid010ConnectionTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for qpid010ConnectionTable 
     */
#include "ConnectionTable_oids.h"

    /*
     * enum definions 
     */
#include "ConnectionTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_ConnectionTable(void);
    void            shutdown_qpid010ConnectionTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table qpid010ConnectionTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * MRG-MESSAGING-MIB::qpid010ConnectionTable is subid 1 of qpid010Connections.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.1.10.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review qpid010ConnectionTable registration context.
     */
    typedef netsnmp_data_list qpid010ConnectionTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review qpid010ConnectionTable data context structure.
     * This structure is used to represent the data for qpid010ConnectionTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * qpid010ConnectionTable.
     */
    typedef struct qpid010ConnectionTable_data_s {

        /*
         * qpid010ConnectionVhostRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010ConnectionVhostRef[255];
        size_t          qpid010ConnectionVhostRef_len;   /* # of char elements, not bytes */

        /*
         * qpid010ConnectionAddress(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010ConnectionAddress[255];
        size_t          qpid010ConnectionAddress_len;    /* # of char elements, not bytes */

        /*
         * qpid010ConnectionIncoming(3)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010ConnectionIncoming;

        /*
         * qpid010ConnectionSystemConnection(4)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010ConnectionSystemConnection;

        /*
         * qpid010ConnectionUserProxyAuth(5)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          qpid010ConnectionUserProxyAuth;

        /*
         * qpid010ConnectionFederationLink(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          qpid010ConnectionFederationLink;

        /*
         * qpid010ConnectionAuthIdentity(7)/Sstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            qpid010ConnectionAuthIdentity[255];
        size_t          qpid010ConnectionAuthIdentity_len;       /* # of char elements, not bytes */

        /*
         * qpid010ConnectionRemoteProcessName(8)/Lstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            qpid010ConnectionRemoteProcessName[65535];
        size_t          qpid010ConnectionRemoteProcessName_len;  /* # of char elements, not bytes */

        /*
         * qpid010ConnectionRemotePid(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010ConnectionRemotePid;

        /*
         * qpid010ConnectionRemoteParentPid(10)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          qpid010ConnectionRemoteParentPid;

        /*
         * qpid010ConnectionShadow(11)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          qpid010ConnectionShadow;

        /*
         * qpid010ConnectionSaslMechanism(12)/Sstr/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            qpid010ConnectionSaslMechanism[255];
        size_t          qpid010ConnectionSaslMechanism_len;      /* # of char elements, not bytes */

        /*
         * qpid010ConnectionSaslSsf(13)/Uint16/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            qpid010ConnectionSaslSsf;

        /*
         * qpid010ConnectionClosing(14)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          qpid010ConnectionClosing;

        /*
         * qpid010ConnectionFramesFromClient(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionFramesFromClient;

        /*
         * qpid010ConnectionFramesToClient(16)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionFramesToClient;

        /*
         * qpid010ConnectionBytesFromClient(17)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionBytesFromClient;

        /*
         * qpid010ConnectionBytesToClient(18)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionBytesToClient;

        /*
         * qpid010ConnectionMsgsFromClient(19)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionMsgsFromClient;

        /*
         * qpid010ConnectionMsgsToClient(20)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
        U64             qpid010ConnectionMsgsToClient;

    } qpid010ConnectionTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review qpid010ConnectionTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef qpid010ConnectionTable_data qpid010ConnectionTable_undo_data;

    /*
     * TODO:120:r: |-> Review qpid010ConnectionTable mib index.
     * This structure is used to represent the index for qpid010ConnectionTable.
     */
    typedef struct qpid010ConnectionTable_mib_index_s {

        /*
         * qpid010ConnectionInternalIndex(21)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          qpid010ConnectionInternalIndex;


    } qpid010ConnectionTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review qpid010ConnectionTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_qpid010ConnectionTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review qpid010ConnectionTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * qpid010ConnectionTable_rowreq_ctx pointer.
     */
    typedef struct qpid010ConnectionTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_qpid010ConnectionTable_IDX_LEN];

        qpid010ConnectionTable_mib_index tbl_idx;

        qpid010ConnectionTable_data data;
        qpid010ConnectionTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to qpid010ConnectionTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *qpid010ConnectionTable_data_list;

    } qpid010ConnectionTable_rowreq_ctx;

    typedef struct qpid010ConnectionTable_ref_rowreq_ctx_s {
        qpid010ConnectionTable_rowreq_ctx *rowreq_ctx;
    } qpid010ConnectionTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        qpid010ConnectionTable_pre_request
        (qpid010ConnectionTable_registration * user_context);
    int            
        qpid010ConnectionTable_post_request
        (qpid010ConnectionTable_registration * user_context, int rc);

    int            
        qpid010ConnectionTable_rowreq_ctx_init
        (qpid010ConnectionTable_rowreq_ctx * rowreq_ctx,
         void *user_init_ctx);
    void           
        qpid010ConnectionTable_rowreq_ctx_cleanup
        (qpid010ConnectionTable_rowreq_ctx * rowreq_ctx);

    int            
        qpid010ConnectionTable_check_dependencies
        (qpid010ConnectionTable_rowreq_ctx * rowreq_ctx);
    int            
        qpid010ConnectionTable_commit(qpid010ConnectionTable_rowreq_ctx *
                                     rowreq_ctx);

    qpid010ConnectionTable_rowreq_ctx
        *qpid010ConnectionTable_row_find_by_mib_index
        (qpid010ConnectionTable_mib_index * mib_idx);

    extern const oid qpid010ConnectionTable_oid[];
    extern const int qpid010ConnectionTable_oid_size;


#include "ConnectionTable_interface.h"
#include "ConnectionTable_data_access.h"
#include "ConnectionTable_data_get.h"
#include "ConnectionTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* qpid010CONNECTIONTABLE_H */
/** @} */
