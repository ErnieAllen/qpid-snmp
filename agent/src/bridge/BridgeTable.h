/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef qpid010BRIDGETABLE_H
#define qpid010BRIDGETABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(MRG-MESSAGING-MIB)
config_require(MRG-MESSAGING-MIB/qpid010BridgeTable/qpid010BridgeTable_interface)
config_require(MRG-MESSAGING-MIB/qpid010BridgeTable/qpid010BridgeTable_data_access)
config_require(MRG-MESSAGING-MIB/qpid010BridgeTable/qpid010BridgeTable_data_get)
config_require(MRG-MESSAGING-MIB/qpid010BridgeTable/qpid010BridgeTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for qpid010BridgeTable 
     */
#include "BridgeTable_oids.h"

    /*
     * enum definions 
     */
#include "BridgeTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_BridgeTable(void);
    void            shutdown_qpid010BridgeTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table qpid010BridgeTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * MRG-MESSAGING-MIB::qpid010BridgeTable is subid 1 of qpid010Bridges.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060,15.1.1.12.1, length: 12
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review qpid010BridgeTable registration context.
     */
    typedef netsnmp_data_list qpid010BridgeTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review qpid010BridgeTable data context structure.
     * This structure is used to represent the data for qpid010BridgeTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * qpid010BridgeTable.
     */
    typedef struct qpid010BridgeTable_data_s {

        /*
         * qpid010BridgeLinkRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeLinkRef[255];
        size_t          qpid010BridgeLinkRef_len;        /* # of char elements, not bytes */

        /*
         * qpid010BridgeChannelId(2)/Uint16/ASN_INTEGER/long(long)//l/A/W/e/r/d/H
         */
        long            qpid010BridgeChannelId;

        /*
         * qpid010BridgeDurable(3)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010BridgeDurable;

        /*
         * qpid010BridgeSrc(4)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeSrc[255];
        size_t          qpid010BridgeSrc_len;    /* # of char elements, not bytes */

        /*
         * qpid010BridgeDest(5)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeDest[255];
        size_t          qpid010BridgeDest_len;   /* # of char elements, not bytes */

        /*
         * qpid010BridgeKey(6)/Lstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeKey[65535];
        size_t          qpid010BridgeKey_len;    /* # of char elements, not bytes */

        /*
         * qpid010BridgeSrcIsQueue(7)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010BridgeSrcIsQueue;

        /*
         * qpid010BridgeSrcIsLocal(8)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010BridgeSrcIsLocal;

        /*
         * qpid010BridgeTag(9)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeTag[255];
        size_t          qpid010BridgeTag_len;    /* # of char elements, not bytes */

        /*
         * qpid010BridgeExcludes(10)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            qpid010BridgeExcludes[255];
        size_t          qpid010BridgeExcludes_len;       /* # of char elements, not bytes */

        /*
         * qpid010BridgeDynamic(11)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          qpid010BridgeDynamic;

        /*
         * qpid010BridgeSync(12)/Uint16/ASN_INTEGER/long(long)//l/A/W/e/r/d/H
         */
        long            qpid010BridgeSync;

    } qpid010BridgeTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review qpid010BridgeTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef qpid010BridgeTable_data qpid010BridgeTable_undo_data;

    /*
     * TODO:120:r: |-> Review qpid010BridgeTable mib index.
     * This structure is used to represent the index for qpid010BridgeTable.
     */
    typedef struct qpid010BridgeTable_mib_index_s {

        /*
         * qpid010BridgeInternalIndex(13)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          qpid010BridgeInternalIndex;


    } qpid010BridgeTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review qpid010BridgeTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_qpid010BridgeTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review qpid010BridgeTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * qpid010BridgeTable_rowreq_ctx pointer.
     */
    typedef struct qpid010BridgeTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_qpid010BridgeTable_IDX_LEN];

        qpid010BridgeTable_mib_index tbl_idx;

        qpid010BridgeTable_data data;
        qpid010BridgeTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to qpid010BridgeTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *qpid010BridgeTable_data_list;

    } qpid010BridgeTable_rowreq_ctx;

    typedef struct qpid010BridgeTable_ref_rowreq_ctx_s {
        qpid010BridgeTable_rowreq_ctx *rowreq_ctx;
    } qpid010BridgeTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        qpid010BridgeTable_pre_request(qpid010BridgeTable_registration *
                                      user_context);
    int            
        qpid010BridgeTable_post_request(qpid010BridgeTable_registration *
                                       user_context, int rc);

    int            
        qpid010BridgeTable_rowreq_ctx_init(qpid010BridgeTable_rowreq_ctx *
                                          rowreq_ctx, void *user_init_ctx);
    void           
        qpid010BridgeTable_rowreq_ctx_cleanup(qpid010BridgeTable_rowreq_ctx *
                                             rowreq_ctx);

    int            
        qpid010BridgeTable_check_dependencies(qpid010BridgeTable_rowreq_ctx *
                                             rowreq_ctx);
    int             qpid010BridgeTable_commit(qpid010BridgeTable_rowreq_ctx *
                                             rowreq_ctx);

    qpid010BridgeTable_rowreq_ctx
        *qpid010BridgeTable_row_find_by_mib_index
        (qpid010BridgeTable_mib_index * mib_idx);

    extern const oid qpid010BridgeTable_oid[];
    extern const int qpid010BridgeTable_oid_size;


#include "BridgeTable_interface.h"
#include "BridgeTable_data_access.h"
#include "BridgeTable_data_get.h"
#include "BridgeTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* qpid010BRIDGETABLE_H */
/** @} */
