/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef brokerBRIDGETABLE_H
#define brokerBRIDGETABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(QPID-MESSAGING-MIB)
config_require(QPID-MESSAGING-MIB/brokerBridgeTable/brokerBridgeTable_interface)
config_require(QPID-MESSAGING-MIB/brokerBridgeTable/brokerBridgeTable_data_access)
config_require(QPID-MESSAGING-MIB/brokerBridgeTable/brokerBridgeTable_data_get)
config_require(QPID-MESSAGING-MIB/brokerBridgeTable/brokerBridgeTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for brokerBridgeTable 
     */
#include "BridgeTable_oids.h"

    /*
     * enum definions 
     */
#include "BridgeTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_BridgeTable(void);
    void            shutdown_brokerBridgeTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table brokerBridgeTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * QPID-MESSAGING-MIB::brokerBridgeTable is subid 1 of brokerBridges.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.18060.5672.1.12.1, length: 11
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review brokerBridgeTable registration context.
     */
    typedef netsnmp_data_list brokerBridgeTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review brokerBridgeTable data context structure.
     * This structure is used to represent the data for brokerBridgeTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * brokerBridgeTable.
     */
    typedef struct brokerBridgeTable_data_s {

        /*
         * brokerBridgeLinkRef(1)/ObjId/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeLinkRef[255];
        size_t          brokerBridgeLinkRef_len;        /* # of char elements, not bytes */

        /*
         * brokerBridgeName(2)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeName[255];
        size_t          brokerBridgeName_len;   /* # of char elements, not bytes */

        /*
         * brokerBridgeChannelId(3)/Uint16/ASN_INTEGER/long(long)//l/A/w/e/r/d/H
         */
        long            brokerBridgeChannelId;

        /*
         * brokerBridgeDurable(4)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerBridgeDurable;

        /*
         * brokerBridgeSrc(5)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeSrc[255];
        size_t          brokerBridgeSrc_len;    /* # of char elements, not bytes */

        /*
         * brokerBridgeDest(6)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeDest[255];
        size_t          brokerBridgeDest_len;   /* # of char elements, not bytes */

        /*
         * brokerBridgeKey(7)/Lstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeKey[65535];
        size_t          brokerBridgeKey_len;    /* # of char elements, not bytes */

        /*
         * brokerBridgeSrcIsQueue(8)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerBridgeSrcIsQueue;

        /*
         * brokerBridgeSrcIsLocal(9)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerBridgeSrcIsLocal;

        /*
         * brokerBridgeTag(10)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeTag[255];
        size_t          brokerBridgeTag_len;    /* # of char elements, not bytes */

        /*
         * brokerBridgeExcludes(11)/Sstr/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        char            brokerBridgeExcludes[255];
        size_t          brokerBridgeExcludes_len;       /* # of char elements, not bytes */

        /*
         * brokerBridgeDynamic(12)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
        u_long          brokerBridgeDynamic;

        /*
         * brokerBridgeSync(13)/Uint16/ASN_INTEGER/long(long)//l/A/W/e/r/d/H
         */
        long            brokerBridgeSync;

    } brokerBridgeTable_data;


    /*
     *********************************************************************
     * TODO:115:o: |-> Review brokerBridgeTable undo context.
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef brokerBridgeTable_data brokerBridgeTable_undo_data;

    /*
     * TODO:120:r: |-> Review brokerBridgeTable mib index.
     * This structure is used to represent the index for brokerBridgeTable.
     */
    typedef struct brokerBridgeTable_mib_index_s {

        /*
         * brokerBridgeInternalIndex(14)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          brokerBridgeInternalIndex;


    } brokerBridgeTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review brokerBridgeTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_brokerBridgeTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review brokerBridgeTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * brokerBridgeTable_rowreq_ctx pointer.
     */
    typedef struct brokerBridgeTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_brokerBridgeTable_IDX_LEN];

        brokerBridgeTable_mib_index tbl_idx;

        brokerBridgeTable_data data;
        brokerBridgeTable_undo_data *undo;
        unsigned int    column_set_flags;       /* flags for set columns */


        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to brokerBridgeTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *brokerBridgeTable_data_list;

    } brokerBridgeTable_rowreq_ctx;

    typedef struct brokerBridgeTable_ref_rowreq_ctx_s {
        brokerBridgeTable_rowreq_ctx *rowreq_ctx;
    } brokerBridgeTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        brokerBridgeTable_pre_request(brokerBridgeTable_registration *
                                      user_context);
    int            
        brokerBridgeTable_post_request(brokerBridgeTable_registration *
                                       user_context, int rc);

    int            
        brokerBridgeTable_rowreq_ctx_init(brokerBridgeTable_rowreq_ctx *
                                          rowreq_ctx, void *user_init_ctx);
    void           
        brokerBridgeTable_rowreq_ctx_cleanup(brokerBridgeTable_rowreq_ctx *
                                             rowreq_ctx);

    int            
        brokerBridgeTable_check_dependencies(brokerBridgeTable_rowreq_ctx *
                                             rowreq_ctx);
    int             brokerBridgeTable_commit(brokerBridgeTable_rowreq_ctx *
                                             rowreq_ctx);

    brokerBridgeTable_rowreq_ctx
        *brokerBridgeTable_row_find_by_mib_index
        (brokerBridgeTable_mib_index * mib_idx);

    extern const oid brokerBridgeTable_oid[];
    extern const int brokerBridgeTable_oid_size;


#include "BridgeTable_interface.h"
#include "BridgeTable_data_access.h"
#include "BridgeTable_data_get.h"
#include "BridgeTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* brokerBRIDGETABLE_H */
/** @} */
